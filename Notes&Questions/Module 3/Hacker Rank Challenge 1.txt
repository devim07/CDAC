R1: Sum of the series

import java.io.*;
import java.util.*;

public class Solution {
    static float sum(int n){
        if(n<=0)
            return 0;
        else 
            return ((float)(Math.pow(-1,n+1)*(1.0/n))+sum(n-1));
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        double sum=(double)sum(n);
        System.out.println(sum);
    }
    /*static double sum(int n)
    {
      double i, s = 0.0;
      for (i = 1; i <= n; i++)
          s = s + (1/i)*(Math.pow(-1,i+1));
      return s;
    }
  
    
    // Driven Program
    public static void main(String args[])
    {
       Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.print( sum(n));
         
    }*/

}

=====================================================================================
R2:Negative numbers

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        String[] ss = s.split(", ");
        int[] ans = new int[ss.length];
        for (int i = 0; i < ss.length; i++) {
            ans[i] = Integer.parseInt(ss[i]);
        }
        int pos[]=new int[20], neg[]=new int[20];
        int p=0, n=0;
        for(int i=0; i<ans.length; i++){
            if(ans[i]<0)
                neg[n++]=ans[i];
            else
                pos[p++]=ans[i];
        }
        int arr[]=new int[p+n];
        for(int i=0; i<n; i++)
            System.out.print(neg[i]+" ");
        for(int i=0;i<p; i++)
            System.out.print(pos[i]+" ");
    }
}





==============================================================================
Tower-of-Hanoi Problem

import java.io.*;
import java.util.*;

public class Solution {
    static void hanoi(int n, char source, char inter, char destination){
        if(n==1)
            System.out.println("Disk "+n+" moved from "+source+" to "+destination);
        else{
            hanoi(n-1, source, destination, inter);
            System.out.println("Disk "+(n)+" moved from "+source+" to "+destination);
            hanoi(n-1, inter, source,destination);
        }
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        hanoi(n,'A','B','C');
    }
}



===============================================================================
R3: Max element

import java.io.*;
import java.util.*;

public class Solution {
    static int max(int arr[]){
        int big=0;
        for(int i=0; i<arr.length; i++){
            if(big<arr[i])
                big=arr[i];
        }
        return big;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String s="";
        while(sc.hasNext()==true){
            s=sc.nextLine();
            String ss[]=s.split("[^0-9]+");
            int a[]=new int[ss.length-1];
            for(int i=0; i<ss.length-1; i++){
                a[i]=Integer.parseInt(ss[i+1]);
            }
            System.out.println(max(a));
            
        }
    }
}



==================================================================================
ADS1:Pair with sum

import java.io.*;
import java.util.*;

public class Solution {
    static int sum(int value, int a, int b){
        if((a+b)==value)
            return value;
        else
            return -1;
    }

    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        String s=sc.nextLine();
        int value=sc.nextInt();
        String ss[]=s.split("[^0-9]+");
        int a[]=new int[ss.length];
        for(int i=0; i<ss.length; i++){
            a[i]=Integer.parseInt(ss[i]);
        }
        boolean found=false;
        for(int i=0; i<ss.length-1; i++){
            for(int j=i+1; j<ss.length; j++){
                int result=sum(value, a[i],a[j]);
                if(result!=-1){
                    System.out.print("Pair found ("+a[i]+", "+a[j]+")");
                    found=true;
                }
            }
        }
        if (found==false)
            System.out.print("Pair not found");
    }
}


